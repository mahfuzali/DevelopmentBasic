
- An interface is a reference type that is somewhat similar to an abstract base class that consists of only abstract members. 
- When a class implements an interface, it must provide an implementation for all the members of the interface. 
- A class can implement multiple interfaces even though it can derive from only a single direct base class.
- Interfaces are used to define specific capabilities for classes that do not necessarily have an "is a" relationship.

https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/#BKMK_RelatedSections

An interface contains definitions for a group of related functionalities that a non-abstract class or a struct must implement.

By using interfaces, you can, for example, include behavior from multiple sources in a class. That capability is important in C# 
because the language doesn't support multiple inheritance of classes. In addition, you must use an interface if you want to simulate 
inheritance for structs, because they can't actually inherit from another struct or class.

The name of an interface must be a valid C# identifier name. By convention, interface names begin with a capital I.

Any class or struct that implements the IEquatable<T> interface must contain a definition for an Equals method that matches the signature
that the interface specifies. As a result, you can count on a class that implements IEquatable<T> to contain an Equals method with which 
an instance of the class can determine whether it's equal to another instance of the same class.

The definition of IEquatable<T> doesn’t provide an implementation for Equals. A class or struct can implement multiple interfaces, but a 
class can only inherit from a single class.

Interfaces can contain methods, properties, events, indexers, or any combination of those four member types. 
An interface can't contain constants, fields, operators, instance constructors, finalizers, or types. Interface members are automatically public, 
and they can't include any access modifiers. Members also can't be static.

To implement an interface member, the corresponding member of the implementing class must be public, non-static, and have the same name and signature 
as the interface member.

When a class or struct implements an interface, the class or struct must provide an implementation for all of the members that the interface defines. 
The interface itself provides no functionality that a class or struct can inherit in the way that it can inherit base class functionality. 
However, if a base class implements an interface, any class that's derived from the base class inherits that implementation.

Properties and indexers of a class can define extra accessors for a property or indexer that's defined in an interface. For example, an interface might 
declare a property that has a get accessor. The class that implements the interface can declare the same property with both a get and set accessor. 
However, if the property or indexer uses explicit implementation, the accessors must match. 
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/explicit-interface-implementation

Interfaces can inherit from other interfaces. A class might include an interface multiple times through base classes that it inherits or through interfaces 
that other interfaces inherit. However, the class can provide an implementation of an interface only one time and only if the class declares the interface as 
part of the definition of the class (class ClassName : InterfaceName). If the interface is inherited because you inherited a base class that implements the interface, 
the base class provides the implementation of the members of the interface. However, the derived class can reimplement any virtual interface members instead of 
using the inherited implementation.

A base class can also implement interface members by using virtual members. In that case, a derived class can change the interface behavior by overriding the virtual members. 
For more information about virtual members, see Polymorphism.

