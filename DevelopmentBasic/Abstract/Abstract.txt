https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/abstract


- The abstract modifier indicates that the thing being modified has a missing or incomplete implementation.
- Use the abstract modifier in a class declaration to indicate that a class is intended only to be a base 
class of other classes, not instantiated on its own. 
- Members marked as abstract must be implemented by non-abstract classes that derive from abstract class.

Abstract class have the following feature: 
- An abstract class cannot be instantiated 
- An abstract class may contained abstract methods and accessors
- It is not possible to modify an abstract class with the "sealed" modifer because the two modifiers have
opposite meaning. The sealed modifer prevents a class from being inherited and the abstract modifier 
requires a class to be inherited.
- A non-abstract class devried from a abstract class must include actual implementations of all inherited 
abstract methods and accessors.

Use the abstract modifier in a method or property declaration to indicate that the method or property does
not contain implementation.

Abstract methods have the following features:
- An abstract method is implicitly a virtual method
- Abstract method declarations are only permitted in abstract classes
- Because an abstract method declaration provides no actual implementation, there is no method body; the 
method declaration simply ends with a semicolon and there are no curly braces ({ }) following the signature. 
- The implementation is provided by a method override, which is a member of a non-abstract class.
- It is an error to use the static or virtual modifiers in an abstract method declaration.

Abstract properties behave like abstract methods, except for the differences in declaration and invocation syntax.
- It is an error to use the abstract modifier on a static property.
- An abstract inherited property can be overridden in a derived class by including a property declaration that uses the override modifier.

For more information about abstract classes, see Abstract and Sealed Classes and Class Members.
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members

- An abstract class must provide implementation for all interface members.

- An abstract class that implements an interface might map the interface methods onto abstract methods. For example: